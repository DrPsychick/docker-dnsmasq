dist: xenial
language: bash
services: docker

env:
  global:
    - IMAGE=drpsychick/docker-dnsmasq
  matrix:
    - ALPINE_VERSION=edge
    - ALPINE_VERSION=3.8
    - ALPINE_VERSION=3.7
    - ALPINE_VERSION=3.6

before_script:
  - docker build -t dnsmasq-test --build-arg ALPINE_VERSION=$ALPINE_VERSION .
  - VERSION=$(docker run --rm dnsmasq-test --version |awk '$2 == "version" { print $3; exit }')
  - eval $(ssh-agent -s)
  - echo "$DEPLOY_PRIVATE_KEY" | ssh-add - && ssh-add -l
  - git config --global user.email "github@drsick.net"
  - git config --global user.name "TAG bot"
  - git remote set-url origin "git@github.com:DrPsychick/docker-dnsmasq.git"


script:
  # test always passes
  - echo "Alpine $ALPINE_VERSION Dnsmasq $VERSION"
  - >
    echo "Running tests...";
    docker run dnsmasq-test --version

# Option A: use docker login credentials in travis -> docker images can be compromised, only one 'master' user! -> does not scale
# Option B: use github token -> separate, restricted access, but public repos can be compromised -> more complicated, but scales
# Option C: use github deploy keys -> SSH keys, per repo -> best security, scales
after_success:
  - >
    if [ "$TRAVIS_BRANCH" = "develop" -a "$ALPINE_VERSION" = "edge" ]; then
    curl -H "Content-Type: application/json" --data '{"source_type": "Branch", "source_name": "develop"}'
    -X POST "$DOCKERHUB_TRIGGER";
    fi
  # tag = $dnsmasq_version-alpine$alpine_version (e.g. 2.80-alpine2.8.0)
  - >
    if [ "$TRAVIS_BRANCH" = "master" -a "$TRAVIS_PULL_REQUEST" = "false" ]; then
    if [ "$ALPINE_VERSION" = "edge" ]; then
    branch="$VERSION";
    curl -H "Content-Type: application/json" --data '{"source_type": "Branch", "source_name": "master"}'
    -X POST "$DOCKERHUB_TRIGGER";
    else
    branch="${VERSION}-alpine${ALPINE_VERSION}";
    fi;
    echo "Branch: $branch";
    git checkout -b $branch;
    git pull origin $branch;
    git merge -X theirs --no-edit --no-commit master;
    sed -i -e "s/ALPINE_VERSION=.*/ALPINE_VERSION=$ALPINE_VERSION/" Dockerfile;
    git diff Dockerfile;
    docker build -t $IMAGE:$branch --build-arg ALPINE_VERSION=$ALPINE_VERSION . || exit 1;
    git commit -a -m "automated build on $branch";
    git push -u origin $branch;
    fi
