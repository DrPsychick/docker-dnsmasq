language: bash
services: docker

env:
  global:
  - IMAGE=drpsychick/docker-dnsmasq
  matrix:
  #- ALPINE_VERSION=edge
  #- ALPINE_VERSION=3.8
  #- ALPINE_VERSION=3.7
  - ALPINE_VERSION=3.5

before_script:
  - docker build -t dnsmasq-test --build-arg ALPINE_VERSION=$ALPINE_VERSION .
  - VERSION=$(docker run --rm dnsmasq-test --version |awk '$2 == "version" { print $3; exit }')
  #- alpine_version=$(docker run --rm --entrypoint cat dnsmasq-test /etc/alpine-release)
  - eval $(ssh-agent -s)
  - 'echo "$DEPLOY_PRIVATE_KEY" | ssh-add - && ssh-add -l'
  - git config --global user.email "github@drsick.net"
  - git config --global user.name "TAG bot"


script:
  # test always passes
  - echo "Alpine $ALPINE_VERSION Dnsmasq $VERSION"
  - >
    echo "Running tests...";
    docker run dnsmasq-test --version 
# Option A: use docker login credentials in travis -> docker images can be compromised, only one 'master' user! -> does not scale
# Option B: use github token -> separate, restricted access, but public repos can be compromised -> more complicated, but scales
# Option C: use github deploy keys -> SSH keys, per repo -> best security, scales
after_success:
  # tag = $dnsmasq_version-alpine$alpine_version (e.g. 2.80-alpine2.8.0)
    #test $TRAVIS_BRANCH = "master" && {
  - >
    if [ "$ALPINE_VERSION" == "edge" ]; then branch="$VERSION"; else branch="${VERSION}-alpine${ALPINE_VERSION}"; fi;
    exists="$(test -n "$(git branch -r |grep "$branch")" && echo "exists" || echo "missing")";
    echo "Branch: $branch ($exists)";
    if [ "$exists" == "missing" ]; then 
    git checkout -b $branch;
    sed -i -e "s/ALPINE_VERION=.*/ALPINE_VERSION=$ALPINE_VERSION/" Dockerfile;
    git diff Dockerfile;
    docker build -t $IMAGE:$branch --build-arg ALPINE_VERSION=$ALPINE_VERSION . || exit 1;
    git add Dockerfile && git commit -m "automated tag branch $branch" && git push -u origin $branch;
    git tag $branch && git push --tags;
    fi
